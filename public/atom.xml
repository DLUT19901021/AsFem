<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AsFem</title>
  
  <subtitle>A Simple Finite Element Method program</subtitle>
  <link href="/AsFem/atom.xml" rel="self"/>
  
  <link href="https://yangbai90.github.io/AsFem/"/>
  <updated>2020-05-04T08:03:54.008Z</updated>
  <id>https://yangbai90.github.io/AsFem/</id>
  
  <author>
    <name>Yang Bai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Poisson equation</title>
    <link href="https://yangbai90.github.io/AsFem/2020/05/03/poisson/"/>
    <id>https://yangbai90.github.io/AsFem/2020/05/03/poisson/</id>
    <published>2020-05-03T14:08:45.000Z</published>
    <updated>2020-05-04T08:03:54.008Z</updated>
    
    <content type="html"><![CDATA[<p>A classical Poisson equation can be written out as follow: <span class="math display">\[\begin{equation}\nabla\cdot(\sigma(\phi)\nabla\phi)=F(\phi)\end{equation}\]</span> with the boundary conditions as follows: <span class="math display">\[\begin{align}\sigma(\phi)\nabla\phi\cdot\vec{n}&amp;=0\qquad\mathrm{on}\quad\partial\Omega_{N}\\\phi&amp;=\phi_{0}\qquad\mathrm{on}\quad\partial\Omega_{D}\end{align}\]</span> where both the <span class="math inline">\(\sigma(\phi)\)</span> and <span class="math inline">\(F(\phi)\)</span> can be the function of <span class="math inline">\(\phi\)</span>. In this scenario, the poisson equation becomes the nonlinear case.</p><p>By choosing a suitable test function <span class="math inline">\(\delta\phi\)</span>, we can have the integration of the equation as follow: <span class="math display">\[\begin{equation}\int_{\Omega}\nabla\cdot(\sigma(\phi)\nabla\phi)\delta\phi dV=\int_{\Omega}F(\phi)\delta\phi dV\end{equation}\]</span> applying the divergence theorem and integrating by parts, one can have the weak form as follow: <span class="math display">\[\begin{equation}\int_{\partial\Omega}\sigma(\phi)\nabla\phi\cdot\vec{n}\delta\phi dS-\int_{\Omega}\sigma(\phi)\nabla\phi\nabla\delta\phi dV-\int_{\Omega}F(\phi)\delta\phi dV=0\end{equation}\]</span></p><p>Then, by applying the boundary conditions, the residual can be stated as: <span class="math display">\[\begin{equation}R_{\phi}^{I}=\int_{\Omega}\sigma(\phi)\nabla\phi\nabla N^{I}dV+\int_{\Omega}F(\phi)N^{I}dV\end{equation}\]</span> where the superscript <span class="math inline">\(I\)</span> denotes the i-th node of the current element, and where the subscript <span class="math inline">\(\phi\)</span> represents the related degree of freedom (DoF).</p><p>Furthermore, one can have the tangential matrix or the stiffness matrix as follows: <span class="math display">\[\begin{equation}\begin{aligned}K_{\phi\phi}^{IJ}=\frac{\partial R^{I}_{\phi}}{\partial\phi^{J}}&amp;=\int_{\Omega}\frac{\partial\sigma(\phi)}{\partial\phi}N^{J}\nabla\phi\nabla N^{I}dV+\int_{\Omega}\sigma(\phi)\nabla N^{J}\nabla N^{I}dV\\&amp;+\int_{\Omega}\frac{\partial F(\phi)}{\partial\phi}N^{J}N^{I}dV\end{aligned}\end{equation}\]</span></p><p>Remember, in order to make our code as simple as possible, the derivative of K is without the "-" sign(according to the mathematical definition of Newton-Raphson, we should obtain the K as: <span class="math inline">\(K=-\partial R/\partial\phi\)</span>). However, in AsFem, we ignore the "-" sign to make the programming as easy as possible for our users.</p><p>Then the one-to-one mapping between the code and the formula can be written out as follow:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(isw==<span class="number">3</span>||isw==<span class="number">6</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nNodes;++i)&#123;</span><br><span class="line">        rhs(i)+=ScalarMaterials[<span class="number">0</span>]*(gpGradU[<span class="number">0</span>]*shp.shape_grad(i))</span><br><span class="line">                   +ScalarMaterials[<span class="number">2</span>]*shp.shape_value(i);</span><br><span class="line">        <span class="keyword">if</span>(isw==<span class="number">6</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=nNodes;++j)&#123;</span><br><span class="line">                K(i,j)+=ScalarMaterials[<span class="number">1</span>]*shp.shape_value(j)*(gpGradU[<span class="number">0</span>]*shp.shape_grad(i))*ctan[<span class="number">0</span>]</span><br><span class="line">                       +ScalarMaterials[<span class="number">0</span>]*(shp.shape_grad(j)*shp.shape_grad(i))*ctan[<span class="number">0</span>]</span><br><span class="line">                       +ScalarMaterials[<span class="number">3</span>]*shp.shape_value(j)*shp.shape_value(i)*ctan[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>the ScalarMaterials used here is calculated from the Materials in AsFem, for the details one is referred to <a href="https://github.com/yangbai90/AsFem/blob/master/src/MateSystem/ConstPoissonMaterial.cpp" target="_blank" rel="noopener">ConstPoissonMate</a> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In constpoisson material:</span></span><br><span class="line"><span class="comment">// _MateValues[0]=1.0;// sigma</span></span><br><span class="line"><span class="comment">// _MateValues[1]=0.0;// dsigma/dphi</span></span><br><span class="line"><span class="comment">// _MateValues[2]=1.0;// F</span></span><br><span class="line"><span class="comment">// _MateValues[3]=0.0;// dF/dphi</span></span><br></pre></td></tr></table></figure></p><p>In order to solve this equation, we should define a domain for it: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[mesh]</span><br><span class="line">  type&#x3D;asfem</span><br><span class="line">  dim&#x3D;2</span><br><span class="line">  xmin&#x3D;0.0</span><br><span class="line">  xmax&#x3D;10.0</span><br><span class="line">  ymin&#x3D;0.0</span><br><span class="line">  ymax&#x3D;10.0</span><br><span class="line">  nx&#x3D;100</span><br><span class="line">  ny&#x3D;100</span><br><span class="line">  meshtype&#x3D;quad4</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure> where the <span class="math inline">\(100\times100\)</span> mesh for a <span class="math inline">\(10\times10\)</span> domain is applied.</p><p>Then we need to define the name of our Dof: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[dofs]</span><br><span class="line">name&#x3D;phi</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure> for sure, the name can be whatever you like.</p><p>Next, we need to tell AsFem we want to use the element that can do the calculation for the equations we mentioned above: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[elmts]</span><br><span class="line">    [poisson]</span><br><span class="line">  type&#x3D;poisson</span><br><span class="line">  dofs&#x3D;phi</span><br><span class="line">  mate&#x3D;linear</span><br><span class="line">      domain&#x3D;alldomain</span><br><span class="line">    [end]</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure> Here the 'type=poisson' tells AsFem that we will use the element for the Poisson equation, and it will use the information of 'dof=phi' for the calculation. Later, the material we used in this element will look for the material block '[linear]' since we tell him the 'mate=linear'. Finally, the equation is applied to the domain 'alldomain'(which is the default value for the whole domain, and it can be ignored.)</p><p>Then, after the [elmts] block is defined, we can tell AsFem, how the 'linear' material block should look like: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mates]</span><br><span class="line">  [linear]</span><br><span class="line">    type&#x3D;constpoisson</span><br><span class="line">    params&#x3D;1.0e1 0.3</span><br><span class="line">  [end]</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure> here the 'type=constpoisson' will ask AsFem to run the constpoisson material, and the parameters we used for <span class="math inline">\(\sigma\)</span> and <span class="math inline">\(F\)</span> are 1.0e1 and 0.3.</p><p>Now, all the equations we need are ready to get the final solution, we need to apply the correct boundary conditions: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[bcs]</span><br><span class="line">  [fixphi]</span><br><span class="line">    type&#x3D;dirichlet</span><br><span class="line">    dof&#x3D;phi</span><br><span class="line">    boundary&#x3D;left right bottom top</span><br><span class="line">    value&#x3D;0.0</span><br><span class="line">  [end]</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure> Here we fixed the four edges of the plane to be 0.0. If you only want the top and bottom edge to be fixed, then you just need to give: 'boundary=top bottom'.</p><p>Now we can assign a job to AsFem and ask him to give us the final result: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[job]</span><br><span class="line">  type&#x3D;static</span><br><span class="line">  debug&#x3D;dep</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure> where 'debug=dep' or 'debug=true' allows AsFem to print out some necessary information. For sure, you can also disable it via: 'debug=false'.</p><p>If we run it, the result should look like: <img src="poisson.jpeg" /></p><p>The complete input file can be found here: <a href="https://github.com/yangbai90/AsFem/blob/master/test/AsFem/2020/05/03/poisson/quad4_linear.i" target="_blank" rel="noopener">input</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A classical Poisson equation can be written out as follow: &lt;span class=&quot;math display&quot;&gt;\[\begin{equation}
\nabla\cdot(\sigma(\phi)\nabla\p
      
    
    </summary>
    
    
      <category term="Examples" scheme="https://yangbai90.github.io/AsFem/categories/Examples/"/>
    
    
      <category term="Examples" scheme="https://yangbai90.github.io/AsFem/tags/Examples/"/>
    
      <category term="Poisson" scheme="https://yangbai90.github.io/AsFem/tags/Poisson/"/>
    
  </entry>
  
  <entry>
    <title>Mesh Block</title>
    <link href="https://yangbai90.github.io/AsFem/2020/04/18/meshblock/"/>
    <id>https://yangbai90.github.io/AsFem/2020/04/18/meshblock/</id>
    <published>2020-04-18T13:49:58.000Z</published>
    <updated>2020-05-03T13:56:08.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mesh-generation">Mesh generation</h1><p>For the mesh generation, the [mesh] block is required. For example, if one wants to generate the 1d Lagrange mesh, you can use: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mesh]</span><br><span class="line">  type&#x3D;asfem</span><br><span class="line">  dim&#x3D;1</span><br><span class="line">  xmin&#x3D;0.0</span><br><span class="line">  xmax&#x3D;1.0</span><br><span class="line">  nx&#x3D;10</span><br><span class="line">  meshtype&#x3D;edge2</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure> if one wants to save the generated mesh, then the option 'savemesh=true' is required: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mesh]</span><br><span class="line">  type&#x3D;asfem</span><br><span class="line">  dim&#x3D;1</span><br><span class="line">  xmin&#x3D;0.0</span><br><span class="line">  xmax&#x3D;1.0</span><br><span class="line">  nx&#x3D;10</span><br><span class="line">  meshtype&#x3D;edge2</span><br><span class="line">  savemesh&#x3D;true</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure> The mesh will be saved as a <em>.vtu</em> file, which should have the name: your_input_file_name+'_mesh.vtu'(<em>.i</em> is removed from your input file name). For example, if your input file is: <em>test.i</em>, then the mesh file name is: <em>test_mesh.vtu</em>.</p><p>Additionally, AsFem will also print this message in your console: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**************************************************************</span><br><span class="line">*** Start to read input file ...                           ***</span><br><span class="line">***   start to crate mesh ...                              ***</span><br><span class="line">***     save mesh to                   hex20m1_mesh.vtu    ***</span><br><span class="line">***   mesh generation finished !                           ***</span><br></pre></td></tr></table></figure></p><p>Moreover, if one wants to print out the mesh information in the terminal, one can use the 'printmesh=true' option. For example, if we want to print the information of a 1D edge3 type Lagrange mesh, we can use: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mesh]</span><br><span class="line">  type&#x3D;asfem</span><br><span class="line">  dim&#x3D;1</span><br><span class="line">  xmin&#x3D;0.0</span><br><span class="line">  xmax&#x3D;1.0</span><br><span class="line">  nx&#x3D;5</span><br><span class="line">  meshtype&#x3D;edge4</span><br><span class="line">  savemesh&#x3D;false</span><br><span class="line">  printmesh&#x3D;true</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure> then the output should look like: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">***-------------------------------------------------------------------***</span><br><span class="line">*** Mesh information summary:                                         ***</span><br><span class="line">***  Nodes&#x3D;       16, Elmts&#x3D;        7, NodesPerBulkElmt&#x3D;  4           ***</span><br><span class="line">***  Max dim&#x3D; 1, Min dim&#x3D; 0, PhyGroup&#x3D;    3, Meshtype&#x3D; edge4, Order&#x3D;3 ***</span><br><span class="line">***  Physical id                    Phsical Name             Elmts    ***</span><br><span class="line">***        1                                left                 1    ***</span><br><span class="line">***        2                               right                 1    ***</span><br><span class="line">***        3                           alldomain                 5    ***</span><br><span class="line">***-------------------------------------------------------------------***</span><br></pre></td></tr></table></figure> if one wants to print out the details of the mesh, then 'printmesh=dep' option should be used. Consequently, the output should look like: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">***-------------------------------------------------------------------***</span><br><span class="line">*** Mesh information summary:                                         ***</span><br><span class="line">***  Nodes&#x3D;       16, Elmts&#x3D;        7, NodesPerBulkElmt&#x3D;  4           ***</span><br><span class="line">***  Max dim&#x3D; 1, Min dim&#x3D; 0, PhyGroup&#x3D;    3, Meshtype&#x3D; edge4, Order&#x3D;3 ***</span><br><span class="line">***  Physical id                    Phsical Name             Elmts    ***</span><br><span class="line">***        1                                left                 1    ***</span><br><span class="line">***        2                               right                 1    ***</span><br><span class="line">***        3                           alldomain                 5    ***</span><br><span class="line">***  Physical group information (ID and element ID)                   ***</span><br><span class="line">***  phyname&#x3D;                     left, element id&#x3D;        1          ***</span><br><span class="line">***  phyname&#x3D;                    right, element id&#x3D;        2          ***</span><br><span class="line">***  phyname&#x3D;                alldomain, element id&#x3D;        3          ***</span><br><span class="line">***  phyname&#x3D;                alldomain, element id&#x3D;        4          ***</span><br><span class="line">***  phyname&#x3D;                alldomain, element id&#x3D;        5          ***</span><br><span class="line">***  phyname&#x3D;                alldomain, element id&#x3D;        6          ***</span><br><span class="line">***  phyname&#x3D;                alldomain, element id&#x3D;        7          ***</span><br><span class="line">***  Element connectivity information(element id: node index):        ***</span><br><span class="line">***  elmt id&#x3D;        1:       1                                       ***</span><br><span class="line">***  elmt id&#x3D;        2:      16                                       ***</span><br><span class="line">***  elmt id&#x3D;        3:       1        2        3        4            ***</span><br><span class="line">***  elmt id&#x3D;        4:       4        5        6        7            ***</span><br><span class="line">***  elmt id&#x3D;        5:       7        8        9       10            ***</span><br><span class="line">***  elmt id&#x3D;        6:      10       11       12       13            ***</span><br><span class="line">***  elmt id&#x3D;        7:      13       14       15       16            ***</span><br><span class="line">***  Node coornidates (node id, x, y, z and weight)                   ***</span><br><span class="line">***          1:   0.0000e+00,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***          2:   6.6667e-02,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***          3:   1.3333e-01,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***          4:   2.0000e-01,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***          5:   2.6667e-01,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***          6:   3.3333e-01,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***          7:   4.0000e-01,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***          8:   4.6667e-01,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***          9:   5.3333e-01,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***         10:   6.0000e-01,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***         11:   6.6667e-01,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***         12:   7.3333e-01,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***         13:   8.0000e-01,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***         14:   8.6667e-01,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***         15:   9.3333e-01,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***         16:   1.0000e+00,   0.0000e+00,   0.0000e+00,   1.000e+00 ***</span><br><span class="line">***-------------------------------------------------------------------***</span><br></pre></td></tr></table></figure> Since <strong>printmesh=dep</strong> option will print out all the information, includes the nodal coordinates and elemental connectivity, it is suggested <strong>not</strong> use this option in your [mesh] block. If one wants to check the mesh, 'savemesh=true' is already good enough!</p><p>Similarly, for 2D and 3D cases, one can use: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[mesh]</span><br><span class="line">  type&#x3D;asfem</span><br><span class="line">  dim&#x3D;2</span><br><span class="line">  xmin&#x3D;0.0</span><br><span class="line">  xmax&#x3D;1.0</span><br><span class="line">  ymin&#x3D;0.0</span><br><span class="line">  ymax&#x3D;1.0</span><br><span class="line">  nx&#x3D;10</span><br><span class="line">  ny&#x3D;10</span><br><span class="line">  meshtype&#x3D;quad4</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure> and <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[mesh]</span><br><span class="line">  type&#x3D;asfem</span><br><span class="line">  dim&#x3D;3</span><br><span class="line">  xmin&#x3D;0.0</span><br><span class="line">  xmax&#x3D;1.0</span><br><span class="line">  ymin&#x3D;0.0</span><br><span class="line">  ymax&#x3D;1.0</span><br><span class="line">  zmin&#x3D;0.0</span><br><span class="line">  zmax&#x3D;1.0</span><br><span class="line">  nx&#x3D;10</span><br><span class="line">  ny&#x3D;10</span><br><span class="line">  nz&#x3D;10</span><br><span class="line">  meshtype&#x3D;hex8</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure> Or, one can also use: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mesh]</span><br><span class="line">  type&#x3D;asfem</span><br><span class="line">  dim&#x3D;3</span><br><span class="line">  nx&#x3D;10</span><br><span class="line">  ny&#x3D;10</span><br><span class="line">  nz&#x3D;10</span><br><span class="line">  meshtype&#x3D;hex8</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure> then the unit([0,1] in 1D, [0,1]x[0,1] in 2D, [0,1]x[0,1]x[0,1] in 3D) domain will be used by default.</p><p>Currently, AsFem supports the following kinds of built-in mesh:</p><ul><li><p>1D--&gt; edge2, edge3, edge4</p></li><li><p>2D--&gt; quad4, quad8, quad9</p></li><li><p>3D--&gt; hex8, hex20, hex27</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mesh-generation&quot;&gt;Mesh generation&lt;/h1&gt;
&lt;p&gt;For the mesh generation, the [mesh] block is required. For example, if one wants to generat
      
    
    </summary>
    
    
      <category term="Documents" scheme="https://yangbai90.github.io/AsFem/categories/Documents/"/>
    
    
      <category term="Documents" scheme="https://yangbai90.github.io/AsFem/tags/Documents/"/>
    
      <category term="Installation" scheme="https://yangbai90.github.io/AsFem/tags/Installation/"/>
    
  </entry>
  
  <entry>
    <title>Input file</title>
    <link href="https://yangbai90.github.io/AsFem/2020/04/16/input/"/>
    <id>https://yangbai90.github.io/AsFem/2020/04/16/input/</id>
    <published>2020-04-16T14:30:08.000Z</published>
    <updated>2020-05-04T07:41:23.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="before-we-start">Before we start</h1><p>Currently, some available demos can be found here:</p><p><a href="https://space.bilibili.com/100272198/channel/detail?cid=90241" target="_blank" rel="noopener">Demo</a></p><h2 id="write-a-simple-input-file">Write a simple input file:</h2><p>structure of the block in your input file should look like: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[block_name]</span><br><span class="line">type&#x3D;...</span><br><span class="line">option1&#x3D;...</span><br><span class="line">option2&#x3D;...</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure> Here we use the [blockname]/[end] bracket pair to set the properties we want. Thus each block pair must end up with an '[end]'. Remember, even there are sub-blocks inside one big block, each block itself still must end up with an '[end]'. Otherwise, your input file will complain about errors to you!</p><p>For one minimal input file, you need: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mesh]</span><br><span class="line">...</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure></p><p>and the name or name list of the defined degrees of freedom (DoFs), which will be displayed in the Paraview when you open the result file(vtu file). Besides, the name of related DoFs is required when you want to apply the boundary condition. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[dofs]</span><br><span class="line">...</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure></p><p>and the element or the module you want to use: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[elmts]</span><br><span class="line">...</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure></p><p>and the information for the analysis(we call it the [job] block) <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[job]</span><br><span class="line">...</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure></p><p>In summary, you need at least: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[mesh]</span><br><span class="line">...</span><br><span class="line">[end]</span><br><span class="line">[dofs]</span><br><span class="line">...</span><br><span class="line">[end]</span><br><span class="line">[elmts]</span><br><span class="line">...</span><br><span class="line">[end]</span><br><span class="line">[job]</span><br><span class="line">...</span><br><span class="line">[end]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;before-we-start&quot;&gt;Before we start&lt;/h1&gt;
&lt;p&gt;Currently, some available demos can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://space.bilibili.c
      
    
    </summary>
    
    
      <category term="Documents" scheme="https://yangbai90.github.io/AsFem/categories/Documents/"/>
    
    
      <category term="Documents" scheme="https://yangbai90.github.io/AsFem/tags/Documents/"/>
    
      <category term="Input" scheme="https://yangbai90.github.io/AsFem/tags/Input/"/>
    
  </entry>
  
  <entry>
    <title>Installation</title>
    <link href="https://yangbai90.github.io/AsFem/2020/04/15/install/"/>
    <id>https://yangbai90.github.io/AsFem/2020/04/15/install/</id>
    <published>2020-04-15T13:49:58.000Z</published>
    <updated>2020-05-03T13:56:08.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windows">Windows</h1><p>For windows users, it is highly recommended to download the executable file from here <a href="https://github.com/yangbai90/AsFem/releases" target="_blank" rel="noopener">AsFem-Win</a></p><p>If someone really needs to compile the source code by themselves, one can do the following steps:</p><h2 id="step-1">step-1</h2><p>Firstly, you need to install the PETSc in your windows system. In order to do this, you need to install <a href="http://www.cygwin.com/" target="_blank" rel="noopener">Cygwin</a>. Download the exe file and double click on it, then you will be asked to select the FTP server(please choose the one close to you to speed up the download rate).</p><p>After that, you can search the GCC, g++, python, make components (GCC/g++, make, python are required to install PETSc). After the necessary components are selected, Cygwin will download it and install them into the folder you selected. If everything is fine, you should find the 'mintty.exe' file in your Cygwin-install-path/bin folder.</p><h2 id="step-2">step-2</h2><p>In order to let the Cygwin compiler knows that we have the msvc c/c++ compiler(For sure, you must install the <a href="!https://visualstudio.microsoft.com/">VS2019</a>), please open your start-&gt;visualstudo2019-&gt;x86_64-native-compiler (whatever the name it is, just a terminal command-prompt, open it!). Once the terminal is opened, cd into the 'mintty.exe' file's folder and run(please copy the following line into your terminal completely): <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;bash --login</span><br></pre></td></tr></table></figure> it will open a new terminal automatically (named by Cygwin maybe), now both the win32fe compiler and GCC compiler are ready for the next step. Remember, in the following steps, you should do all the compilation stuff in this new terminal!!!</p><h2 id="step-3">step-3</h2><p>Now we can do the installation for PETSc in windows since your new terminal is already a Linux-type terminal, you can download the PETSc via: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O http:&#x2F;&#x2F;ftp.mcs.anl.gov&#x2F;pub&#x2F;petsc&#x2F;release-snapshots&#x2F;petsc-3.11.4.tar.gz</span><br></pre></td></tr></table></figure> or download PETSc from your favorite browser, and choose the version you like from here: https://www.mcs.anl.gov/petsc/mirror/release-snapshots/</p><p>Then you can unzip it via ‘tar -xf petsc.tar.gz’ or just right-click on it and unzip it. After that, cd into the petsc folder from your new terminal, and run the configuration file like below(please don't download any external packages, otherwise the configuration will fail): <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure --with-cc&#x3D;&#39;win32fe cl&#39; --with-fc&#x3D;0 --with-cxx&#x3D;&#39;win32fe cl&#39; \</span><br><span class="line">--with-mpi&#x3D;0 \</span><br><span class="line">--with-openmp&#x3D;1 \</span><br><span class="line">--with-debugging&#x3D;0 \</span><br><span class="line">--download-f2cblaslapack \</span><br><span class="line">COPTFLAGS&#x3D;&#39;-O3 -fopenmp&#39; \</span><br><span class="line">CXXOPTFLAGS&#x3D;&#39;-O3 -fopenmp&#39; \</span><br><span class="line">PETSC_DIR&#x3D;&#96;pwd&#96;</span><br></pre></td></tr></table></figure> after the configuration is done, it will ask you to do several 'make xxxxxx' steps, then you just need to copy the 'make xxx' command from the terminal and copy it and run it. After several steps (3~4, normally it is 1) 'make xxxx' 2) 'make xxx install' 3) 'make xxxx test'), your PETSc should be ready. By default, the petsc is installed in the same folder as your petsc source code, but it may have a different name, i.e. win-opt-arch, something like that.</p><h2 id="step-4">step-4</h2><p>Now we can compile the AsFem source code. All you need to do is editing the CMakeLists.txt file in AsFem's source code folder. Please choose the windows release configuration in CMakeLists.txt file, and make sure the path to your PETSc and Eigen is correct (in windows, the path is 'C:\Program\xxx', however, it should be modified as 'C:/Program/XXX', otherwise it can not be recognized). Another important thing is, in Linux the library file is named as 'xxx.so'. However, it is different in windows, where you should give 'petsc.lib' or whatever the name you see in your petsc's lib folder.</p><p>After your CMakeLists.txt file is ready, open your VisualStudio2019 and open the AsFem folder(here you don't need to create a new project, just open the AsFem folder should be fine), then compile it. In order to run asfem, you need to put the petsc.dll file together with asfem executable.</p><h1 id="linux">Linux</h1><p>For Linux users, it is much simpler. All you need is the g++ compiler and one working MPI compiler. Then you can do:</p><h2 id="step-1-1">step-1</h2><p>install the PETSc ### step-1-1 run the configuration file for petsc: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure \</span><br><span class="line">--prefix&#x3D;path-to-your-petsc-installation-folder \</span><br><span class="line">--with-debugging&#x3D;0 \</span><br><span class="line">--with-ssl&#x3D;0 \</span><br><span class="line">--with-pic&#x3D;1 \</span><br><span class="line">--with-openmp&#x3D;1 \</span><br><span class="line">--with-mpi&#x3D;1 \</span><br><span class="line">--with-shared-libraries&#x3D;1 \</span><br><span class="line">--with-cxx-dialect&#x3D;C++14 \</span><br><span class="line">--with-fortran-bindings&#x3D;0 \</span><br><span class="line">--with-sowing&#x3D;0 \</span><br><span class="line">--download-hypre&#x3D;1 \</span><br><span class="line">--download-fblaslapack&#x3D;1 \</span><br><span class="line">--download-metis&#x3D;1 \</span><br><span class="line">--download-ptscotch&#x3D;1 \</span><br><span class="line">--download-parmetis&#x3D;1 \</span><br><span class="line">--download-superlu_dist&#x3D;1 \</span><br><span class="line">--download-scalapack&#x3D;1 \</span><br><span class="line">--download-mumps&#x3D;1 \</span><br><span class="line">--download-slepc&#x3D;1 \</span><br><span class="line">COPTFLAGS&#x3D;&#39;-fPIC -fopenmp -O3 -march&#x3D;native -mtune&#x3D;native &#39; \</span><br><span class="line">CXXOPTFLAGS&#x3D;&#39;-fPIC -fopenmp -O3 -march&#x3D;native -mtune&#x3D;native &#39; \</span><br><span class="line">FOPTFLAGS&#x3D;&#39;-fPIC -fopenmp -O3 -march&#x3D;native -mtune&#x3D;native &#39; \</span><br><span class="line">PETSC_DIR&#x3D;&#96;pwd&#96;</span><br></pre></td></tr></table></figure> or you can also compile a minimal petsc(without any external packages): <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure \</span><br><span class="line">--prefix&#x3D;path-to-your-petsc-installation-folder \</span><br><span class="line">--with-debugging&#x3D;0 \</span><br><span class="line">--with-ssl&#x3D;0 \</span><br><span class="line">--with-pic&#x3D;1 \</span><br><span class="line">--with-openmp&#x3D;1 \</span><br><span class="line">--with-mpi&#x3D;1 \</span><br><span class="line">--with-shared-libraries&#x3D;1 \</span><br><span class="line">--with-cxx-dialect&#x3D;C++14 \</span><br><span class="line">--with-sowing&#x3D;0 \</span><br><span class="line">--download-fblaslapack&#x3D;1 \</span><br><span class="line">COPTFLAGS&#x3D;&#39;-fPIC -fopenmp -O3 -march&#x3D;native -mtune&#x3D;native &#39; \</span><br><span class="line">CXXOPTFLAGS&#x3D;&#39;-fPIC -fopenmp -O3 -march&#x3D;native -mtune&#x3D;native &#39; \</span><br><span class="line">FOPTFLAGS&#x3D;&#39;-fPIC -fopenmp -O3 -march&#x3D;native -mtune&#x3D;native &#39; \</span><br><span class="line">PETSC_DIR&#x3D;&#96;pwd&#96;</span><br></pre></td></tr></table></figure></p><p>if everthing is fine, you will be asked to run two to three times for compilation and installation, the command line should looks like: for compilation: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make PETSC_DIR&#x3D;&#x2F;home&#x2F;user&#x2F;Program&#x2F;temp&#x2F;petsc-3.12.5 PETSC_ARCH&#x3D;arch-linux-c-opt all</span><br></pre></td></tr></table></figure> and for installation: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make PETSC_DIR&#x3D;&#x2F;home&#x2F;user&#x2F;Program&#x2F;temp&#x2F;petsc-3.12.5 PETSC_ARCH&#x3D;arch-linux-c-opt install</span><br></pre></td></tr></table></figure> then for the tests: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make PETSC_DIR&#x3D;&#x2F;home&#x2F;user&#x2F;Program&#x2F;MooseLib&#x2F;petsc&#x2F;3.12.5 PETSC_ARCH&#x3D;&quot;&quot; test</span><br></pre></td></tr></table></figure> Now the petsc is ready, we can compile the AsFem library.</p><h2 id="step-2-1">step-2</h2><p>We can download the AsFem source code via: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;yangbai90&#x2F;AsFem.git</span><br></pre></td></tr></table></figure> then go to the source code folder and edit the CMakeLists.txt file, change the path of PETSc and MPI to your own one. Then you can run: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake CMakeLists.txt &amp;&amp; make -j8</span><br></pre></td></tr></table></figure> after the compilation is finished, the executable file 'asfem' should be found under the bin folder.</p><h2 id="step-3-1">step-3</h2><p>Add the 'asfem' executable to your bashrc, which can allow you to run the asfem from terminal directly: Open your bashrc: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure> then add the following two lines to your bashrc: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export asfem&#x3D;&#x2F;path&#x2F;to&#x2F;your&#x2F;asfem&#x2F;</span><br><span class="line">export PATH&#x3D;$PATH:$asfem&#x2F;bin</span><br></pre></td></tr></table></figure> then save it and open a new terminal, you can run AsFem as follow: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asfem -i your_input.i</span><br></pre></td></tr></table></figure> or in the parallel way: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mpirun -np 4 asfem -i your_input.i</span><br></pre></td></tr></table></figure></p><p>Enjoy it!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;windows&quot;&gt;Windows&lt;/h1&gt;
&lt;p&gt;For windows users, it is highly recommended to download the executable file from here &lt;a href=&quot;https://gith
      
    
    </summary>
    
    
      <category term="Documents" scheme="https://yangbai90.github.io/AsFem/categories/Documents/"/>
    
    
      <category term="Documents" scheme="https://yangbai90.github.io/AsFem/tags/Documents/"/>
    
      <category term="Installation" scheme="https://yangbai90.github.io/AsFem/tags/Installation/"/>
    
  </entry>
  
</feed>
